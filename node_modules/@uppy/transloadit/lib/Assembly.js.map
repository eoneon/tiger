{"version":3,"names":["Emitter","io","has","NetworkError","fetchWithNetworkError","parseUrl","ASSEMBLY_UPLOADING","ASSEMBLY_EXECUTING","ASSEMBLY_COMPLETED","statusOrder","isStatus","status","test","indexOf","_rateLimitedQueue","_classPrivateFieldLooseKey","_fetchWithNetworkError","_previousFetchStatusStillPending","_sse","_onFinished","_connectServerSentEvents","_connectSocket","_onError","_beginPolling","_fetchStatus","_diffStatus","TransloaditAssembly","constructor","assembly","rateLimitedQueue","Object","defineProperty","value","_diffStatus2","_fetchStatus2","_beginPolling2","_onError2","_connectSocket2","_connectServerSentEvents2","_onFinished2","writable","socket","pollInterval","closed","_classPrivateFieldLooseBase","wrapPromiseFunction","connect","update","diff","updateStatus","next","close","disconnect","clearInterval","emit","EventSource","websocket_url","assembly_id","addEventListener","e","data","file","JSON","parse","uploads","push","_this$status$results","_this$status$results$","stepName","result","results","msg","parsed","origin","transports","path","pathname","on","id","_this$status$results2","_this$status$results3","assign","Error","setInterval","connected","_temp","isPaused","response","assembly_ssl_url","rateLimit","ok","statusText","json","err","prev","prevStatus","nextStatus","error","nowExecuting","keys","filter","upload","forEach","nextResults","prevResults","n","some","p","undefined"],"sources":["Assembly.js"],"sourcesContent":["import Emitter from 'component-emitter'\nimport { io } from 'socket.io-client'\nimport has from '@uppy/utils/lib/hasProperty'\nimport NetworkError from '@uppy/utils/lib/NetworkError'\nimport fetchWithNetworkError from '@uppy/utils/lib/fetchWithNetworkError'\nimport parseUrl from './parseUrl.js'\n\nconst ASSEMBLY_UPLOADING = 'ASSEMBLY_UPLOADING'\nconst ASSEMBLY_EXECUTING = 'ASSEMBLY_EXECUTING'\nconst ASSEMBLY_COMPLETED = 'ASSEMBLY_COMPLETED'\n\nconst statusOrder = [\n  ASSEMBLY_UPLOADING,\n  ASSEMBLY_EXECUTING,\n  ASSEMBLY_COMPLETED,\n]\n\n/**\n * Check that an assembly status is equal to or larger than some desired status.\n * It checks for things that are larger so that a comparison like this works,\n * when the old assembly status is UPLOADING but the new is FINISHED:\n *\n * !isStatus(oldStatus, ASSEMBLY_EXECUTING) && isStatus(newState, ASSEMBLY_EXECUTING)\n *\n * …so that we can emit the 'executing' event even if the execution step was so\n * fast that we missed it.\n */\nfunction isStatus (status, test) {\n  return statusOrder.indexOf(status) >= statusOrder.indexOf(test)\n}\n\nclass TransloaditAssembly extends Emitter {\n  #rateLimitedQueue\n\n  #fetchWithNetworkError\n\n  #previousFetchStatusStillPending = false\n\n  #sse\n\n  constructor (assembly, rateLimitedQueue) {\n    super()\n\n    // The current assembly status.\n    this.status = assembly\n    // The socket.io connection.\n    this.socket = null\n    // The interval timer for full status updates.\n    this.pollInterval = null\n    // Whether this assembly has been closed (finished or errored)\n    this.closed = false\n\n    this.#rateLimitedQueue = rateLimitedQueue\n    this.#fetchWithNetworkError = rateLimitedQueue.wrapPromiseFunction(fetchWithNetworkError)\n  }\n\n  connect () {\n    this.#connectServerSentEvents()\n    this.#connectSocket()\n    this.#beginPolling()\n  }\n\n  #onFinished () {\n    this.emit('finished')\n    this.close()\n  }\n\n  #connectServerSentEvents () {\n    this.#sse = new EventSource(`${this.status.websocket_url}?assembly=${this.status.assembly_id}`)\n\n    this.#sse.addEventListener('open', () => {\n      // if server side events works, we don't need websockets anymore (it's just a fallback)\n      if (this.socket) {\n        this.socket.disconnect()\n        this.socket = null\n      }\n      clearInterval(this.pollInterval)\n      this.pollInterval = null\n    })\n\n    /*\n     * The event \"message\" is a special case, as it\n     * will capture events without an event field\n     * as well as events that have the specific type\n     * other event type.\n     */\n    this.#sse.addEventListener('message', (e) => {\n      if (e.data === 'assembly_finished') {\n        this.#onFinished()\n      }\n\n      if (e.data === 'assembly_uploading_finished') {\n        this.emit('executing')\n      }\n\n      if (e.data === 'assembly_upload_meta_data_extracted') {\n        this.emit('metadata')\n        this.#fetchStatus({ diff: false })\n      }\n    })\n\n    this.#sse.addEventListener('assembly_upload_finished', (e) => {\n      const file = JSON.parse(e.data)\n      this.emit('upload', file)\n      this.status.uploads.push(file)\n    })\n\n    this.#sse.addEventListener('assembly_result_finished', (e) => {\n      const [stepName, result] = JSON.parse(e.data)\n      this.emit('result', stepName, result)\n      ;(this.status.results[stepName] ??= []).push(result)\n    })\n\n    this.#sse.addEventListener('assembly_error', (e) => {\n      try {\n        this.#onError(JSON.parse(e.data))\n      } catch {\n        this.#onError({ msg: e.data })\n      }\n      // Refetch for updated status code\n      this.#fetchStatus({ diff: false })\n    })\n  }\n\n  #connectSocket () {\n    const parsed = parseUrl(this.status.websocket_url)\n    const socket = io(parsed.origin, {\n      transports: ['websocket'],\n      path: parsed.pathname,\n    })\n\n    socket.on('connect', () => {\n      socket.emit('assembly_connect', {\n        id: this.status.assembly_id,\n      })\n\n      this.emit('connect')\n    })\n\n    socket.on('connect_error', () => {\n      socket.disconnect()\n      this.socket = null\n    })\n\n    socket.on('assembly_finished', () => {\n      this.#onFinished()\n    })\n\n    socket.on('assembly_upload_finished', (file) => {\n      this.emit('upload', file)\n      this.status.uploads.push(file)\n    })\n\n    socket.on('assembly_uploading_finished', () => {\n      this.emit('executing')\n    })\n\n    socket.on('assembly_upload_meta_data_extracted', () => {\n      this.emit('metadata')\n      this.#fetchStatus({ diff: false })\n    })\n\n    socket.on('assembly_result_finished', (stepName, result) => {\n      this.emit('result', stepName, result)\n      ;(this.status.results[stepName] ??= []).push(result)\n    })\n\n    socket.on('assembly_error', (status) => {\n      // Refetch for updated status code\n      this.#fetchStatus({ diff: false })\n      this.#onError(status)\n    })\n\n    this.socket = socket\n  }\n\n  #onError (status) {\n    this.emit('error', Object.assign(new Error(status.msg), status))\n    this.close()\n  }\n\n  /**\n   * Begin polling for assembly status changes. This sends a request to the\n   * assembly status endpoint every so often, if the socket is not connected.\n   * If the socket connection fails or takes a long time, we won't miss any\n   * events.\n   */\n  #beginPolling () {\n    this.pollInterval = setInterval(() => {\n      if (!this.socket || !this.socket.connected) {\n        this.#fetchStatus()\n      }\n    }, 2000)\n  }\n\n  /**\n   * Reload assembly status. Useful if the socket doesn't work.\n   *\n   * Pass `diff: false` to avoid emitting diff events, instead only emitting\n   * 'status'.\n   */\n  async #fetchStatus ({ diff = true } = {}) {\n    if (this.closed || this.#rateLimitedQueue.isPaused || this.#previousFetchStatusStillPending) return\n\n    try {\n      this.#previousFetchStatusStillPending = true\n      const response = await this.#fetchWithNetworkError(this.status.assembly_ssl_url)\n      this.#previousFetchStatusStillPending = false\n\n      if (this.closed) return\n\n      if (response.status === 429) {\n        this.#rateLimitedQueue.rateLimit(2_000)\n        return\n      }\n\n      if (!response.ok) {\n        this.#onError(new NetworkError(response.statusText))\n        return\n      }\n\n      const status = await response.json()\n      // Avoid updating if we closed during this request's lifetime.\n      if (this.closed) return\n      this.emit('status', status)\n\n      if (diff) {\n        this.updateStatus(status)\n      } else {\n        this.status = status\n      }\n    } catch (err) {\n      this.#onError(err)\n    }\n  }\n\n  update () {\n    return this.#fetchStatus({ diff: true })\n  }\n\n  /**\n   * Update this assembly's status with a full new object. Events will be\n   * emitted for status changes, new files, and new results.\n   *\n   * @param {object} next The new assembly status object.\n   */\n  updateStatus (next) {\n    this.#diffStatus(this.status, next)\n    this.status = next\n  }\n\n  /**\n   * Diff two assembly statuses, and emit the events necessary to go from `prev`\n   * to `next`.\n   *\n   * @param {object} prev The previous assembly status.\n   * @param {object} next The new assembly status.\n   */\n  #diffStatus (prev, next) {\n    const prevStatus = prev.ok\n    const nextStatus = next.ok\n\n    if (next.error && !prev.error) {\n      return this.#onError(next)\n    }\n\n    // Desired emit order:\n    //  - executing\n    //  - (n × upload)\n    //  - metadata\n    //  - (m × result)\n    //  - finished\n    // The below checks run in this order, that way even if we jump from\n    // UPLOADING straight to FINISHED all the events are emitted as expected.\n\n    const nowExecuting = isStatus(nextStatus, ASSEMBLY_EXECUTING)\n      && !isStatus(prevStatus, ASSEMBLY_EXECUTING)\n    if (nowExecuting) {\n      // Without WebSockets, this is our only way to tell if uploading finished.\n      // Hence, we emit this just before the 'upload's and before the 'metadata'\n      // event for the most intuitive ordering, corresponding to the _usual_\n      // ordering (if not guaranteed) that you'd get on the WebSocket.\n      this.emit('executing')\n    }\n\n    // Find new uploaded files.\n    Object.keys(next.uploads)\n      .filter((upload) => !has(prev.uploads, upload))\n      .forEach((upload) => {\n        this.emit('upload', next.uploads[upload])\n      })\n\n    if (nowExecuting) {\n      this.emit('metadata')\n    }\n\n    // Find new results.\n    Object.keys(next.results).forEach((stepName) => {\n      const nextResults = next.results[stepName]\n      const prevResults = prev.results[stepName]\n\n      nextResults\n        .filter((n) => !prevResults || !prevResults.some((p) => p.id === n.id))\n        .forEach((result) => {\n          this.emit('result', stepName, result)\n        })\n    })\n\n    if (isStatus(nextStatus, ASSEMBLY_COMPLETED)\n        && !isStatus(prevStatus, ASSEMBLY_COMPLETED)) {\n      this.emit('finished')\n    }\n\n    return undefined\n  }\n\n  /**\n   * Stop updating this assembly.\n   */\n  close () {\n    this.closed = true\n    if (this.#sse) {\n      this.#sse.close()\n      this.#sse = null\n    }\n    if (this.socket) {\n      this.socket.disconnect()\n      this.socket = null\n    }\n    clearInterval(this.pollInterval)\n    this.pollInterval = null\n  }\n}\n\nexport default TransloaditAssembly\n"],"mappings":"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"}