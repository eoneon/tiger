{"version":3,"names":["UploaderPlugin","Socket","Provider","RequestClient","EventManager","emitSocketProgress","getSocketHost","RateLimitedQueue","filterNonFailedFiles","filterFilesToEmitUploadStarted","createAbortError","MultipartUploader","pausingUploadReason","createSignedURL","packageJson","assertServerError","res","error","Error","message","Object","assign","getExpiry","credentials","expirationDate","Expiration","timeUntilExpiry","Math","floor","Date","now","undefined","getAllowedMetadata","_ref","meta","allowedMetaFields","querify","metaFields","keys","fromEntries","filter","key","map","realKey","value","String","throwIfAborted","signal","aborted","cause","reason","_abortMultipartUpload","_classPrivateFieldLooseKey","_cache","_createMultipartUpload","_fetchSignature","_getUploadParameters","_listParts","_previousRetryDelay","_requests","_retryDelayIterator","_sendCompletionRequest","_setS3MultipartState","_uploadPartBytes","_getFile","_shouldRetry","_nonMultipartUpload","HTTPCommunicationQueue","constructor","requests","options","setS3MultipartState","getFile","defineProperty","_nonMultipartUpload2","_shouldRetry2","writable","WeakMap","_classPrivateFieldLooseBase","setOptions","wrapPromiseFunction","abortMultipartUpload","priority","createMultipartUpload","signPart","listParts","completeMultipartUpload","_options$retryDelays","retryDelays","values","uploadPartBytes","Infinity","getUploadParameters","getUploadId","file","cachedResult","get","data","promise","abortPromise","abort","delete","addEventListener","once","set","then","result","removeEventListener","abortFileUpload","create","awaitedResult","uploadFile","chunks","length","shouldUseMultipart","uploadId","parts","Promise","all","chunk","i","uploadChunk","abortOn","err","name","restoreUploadFile","uploadIdAndKey","resumeUploadFile","alreadyUploadedParts","partNumber","alreadyUploadedInfo","find","_ref2","PartNumber","setAsUploaded","ETag","chunkData","getData","onProgress","onComplete","signature","body","size","_err$source","status","source","isPaused","limit","_classPrivateFieldLoo","next","done","rateLimit","resolve","setTimeout","_classPrivateFieldLoo2","navigator","onLine","pause","window","resume","_classPrivateFieldLoo3","method","url","fields","headers","toUpperCase","formData","FormData","entries","forEach","_ref10","_companionCommunicationQueue","_client","_cachedTemporaryCredentials","_getTemporarySecurityCredentials","_setS3MultipartState2","_getFile2","_uploadFile","_requestSocketToken","_upload","_setCompanionHeaders","_setResumableUploadsCapability","_resetResumableCapability","_Symbol$for","Symbol","for","AwsS3Multipart","uppy","opts","_this$opts$rateLimite","_uploadFile2","_getTemporarySecurityCredentials2","_ref3","cFile","id","setFileState","s3Multipart","Client","remote","providerOptions","provider","client","tus","post","protocol","metadata","token","fileIDs","files","getFilesByIds","filesFiltered","filesToEmit","emit","promises","isRemote","controller","AbortController","removedHandler","removedFile","on","resetUploaderReferences","uploadPromise","uploadRemoteFile","wrapSyncFunction","off","upload","setCompanionHeaders","companionHeaders","boolean","capabilities","getState","setState","resumableUploads","type","title","defaultOptions","bind","getTemporarySecurityCredentials","prepareUploadParts","_ref4","presignedUrls","number","rateLimitedQueue","uploaders","uploaderEvents","uploaderSockets","setQueueRequestSocketToken","newOptions","fileID","really","remove","close","assertHost","companionUrl","filename","_ref5","encodeURIComponent","_ref6","uploadIdEnc","expires","accountKey","AccessKeyId","accountSecret","SecretAccessKey","sessionToken","SessionToken","bucketName","bucket","Region","region","Key","crypto","randomUUID","_ref7","_ref8","query","URLSearchParams","_ref9","reject","xhr","XMLHttpRequest","open","setRequestHeader","responseType","timeout","onabort","cleanup","ev","target","responseText","includes","loaded","lengthComputable","etag","getResponseHeader","location","console","warn","send","connectToServerSocket","_this","queuedRequest","serverToken","host","socket","autoOpen","onFileRemove","onFilePause","run","onPauseAll","onCancelAll","_temp","onResumeAll","onRetry","isOpen","onRetryAll","progressData","errData","uploadResp","uploadURL","cb","targetFileID","eventHandler","_this2","arguments","install","addPreProcessor","addUploader","uninstall","removePreProcessor","removeUploader","_this3","bytesUploaded","bytesTotal","uploader","onError","log","onSuccess","onPartComplete","part","companionComm","getChunkSize","removed","_temp2","start","VERSION","version"],"sources":["index.js"],"sourcesContent":["import UploaderPlugin from '@uppy/core/lib/UploaderPlugin.js'\nimport { Socket, Provider, RequestClient } from '@uppy/companion-client'\nimport EventManager from '@uppy/utils/lib/EventManager'\nimport emitSocketProgress from '@uppy/utils/lib/emitSocketProgress'\nimport getSocketHost from '@uppy/utils/lib/getSocketHost'\nimport { RateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue'\nimport { filterNonFailedFiles, filterFilesToEmitUploadStarted } from '@uppy/utils/lib/fileFilters'\nimport { createAbortError } from '@uppy/utils/lib/AbortController'\n\nimport MultipartUploader, { pausingUploadReason } from './MultipartUploader.js'\nimport createSignedURL from './createSignedURL.js'\nimport packageJson from '../package.json'\n\nfunction assertServerError (res) {\n  if (res && res.error) {\n    const error = new Error(res.message)\n    Object.assign(error, res.error)\n    throw error\n  }\n  return res\n}\n\n/**\n * Computes the expiry time for a request signed with temporary credentials. If\n * no expiration was provided, or an invalid value (e.g. in the past) is\n * provided, undefined is returned. This function assumes the client clock is in\n * sync with the remote server, which is a requirement for the signature to be\n * validated for AWS anyway.\n *\n * @param {import('../types/index.js').AwsS3STSResponse['credentials']} credentials\n * @returns {number | undefined}\n */\nfunction getExpiry (credentials) {\n  const expirationDate = credentials.Expiration\n  if (expirationDate) {\n    const timeUntilExpiry = Math.floor((new Date(expirationDate) - Date.now()) / 1000)\n    if (timeUntilExpiry > 9) {\n      return timeUntilExpiry\n    }\n  }\n  return undefined\n}\n\nfunction getAllowedMetadata ({ meta, allowedMetaFields, querify = false }) {\n  const metaFields = allowedMetaFields ?? Object.keys(meta)\n\n  if (!meta) return {}\n\n  return Object.fromEntries(\n    metaFields\n      .filter(key => meta[key] != null)\n      .map((key) => {\n        const realKey = querify ? `metadata[${key}]` : key\n        const value = String(meta[key])\n        return [realKey, value]\n      }),\n  )\n}\n\nfunction throwIfAborted (signal) {\n  if (signal?.aborted) { throw createAbortError('The operation was aborted', { cause: signal.reason }) }\n}\n\nclass HTTPCommunicationQueue {\n  #abortMultipartUpload\n\n  #cache = new WeakMap()\n\n  #createMultipartUpload\n\n  #fetchSignature\n\n  #getUploadParameters\n\n  #listParts\n\n  #previousRetryDelay\n\n  #requests\n\n  #retryDelayIterator\n\n  #sendCompletionRequest\n\n  #setS3MultipartState\n\n  #uploadPartBytes\n\n  #getFile\n\n  constructor (requests, options, setS3MultipartState, getFile) {\n    this.#requests = requests\n    this.#setS3MultipartState = setS3MultipartState\n    this.#getFile = getFile\n    this.setOptions(options)\n  }\n\n  setOptions (options) {\n    const requests = this.#requests\n\n    if ('abortMultipartUpload' in options) {\n      this.#abortMultipartUpload = requests.wrapPromiseFunction(options.abortMultipartUpload, { priority:1 })\n    }\n    if ('createMultipartUpload' in options) {\n      this.#createMultipartUpload = requests.wrapPromiseFunction(options.createMultipartUpload, { priority:-1 })\n    }\n    if ('signPart' in options) {\n      this.#fetchSignature = requests.wrapPromiseFunction(options.signPart)\n    }\n    if ('listParts' in options) {\n      this.#listParts = requests.wrapPromiseFunction(options.listParts)\n    }\n    if ('completeMultipartUpload' in options) {\n      this.#sendCompletionRequest = requests.wrapPromiseFunction(options.completeMultipartUpload, { priority:1 })\n    }\n    if ('retryDelays' in options) {\n      this.#retryDelayIterator = options.retryDelays?.values()\n    }\n    if ('uploadPartBytes' in options) {\n      this.#uploadPartBytes = requests.wrapPromiseFunction(options.uploadPartBytes, { priority:Infinity })\n    }\n    if ('getUploadParameters' in options) {\n      this.#getUploadParameters = requests.wrapPromiseFunction(options.getUploadParameters)\n    }\n  }\n\n  async #shouldRetry (err) {\n    const requests = this.#requests\n    const status = err?.source?.status\n\n    // TODO: this retry logic is taken out of Tus. We should have a centralized place for retrying,\n    // perhaps the rate limited queue, and dedupe all plugins with that.\n    if (status == null) {\n      return false\n    }\n    if (status === 403 && err.message === 'Request has expired') {\n      if (!requests.isPaused) {\n        // We don't want to exhaust the retryDelayIterator as long as there are\n        // more than one request in parallel, to give slower connection a chance\n        // to catch up with the expiry set in Companion.\n        if (requests.limit === 1 || this.#previousRetryDelay == null) {\n          const next = this.#retryDelayIterator?.next()\n          if (next == null || next.done) {\n            return false\n          }\n          // If there are more than 1 request done in parallel, the RLQ limit is\n          // decreased and the failed request is requeued after waiting for a bit.\n          // If there is only one request in parallel, the limit can't be\n          // decreased, so we iterate over `retryDelayIterator` as we do for\n          // other failures.\n          // `#previousRetryDelay` caches the value so we can re-use it next time.\n          this.#previousRetryDelay = next.value\n        }\n        // No need to stop the other requests, we just want to lower the limit.\n        requests.rateLimit(0)\n        await new Promise(resolve => setTimeout(resolve, this.#previousRetryDelay))\n      }\n    } else if (status === 429) {\n      // HTTP 429 Too Many Requests => to avoid the whole download to fail, pause all requests.\n      if (!requests.isPaused) {\n        const next = this.#retryDelayIterator?.next()\n        if (next == null || next.done) {\n          return false\n        }\n        requests.rateLimit(next.value)\n      }\n    } else if (status > 400 && status < 500 && status !== 409) {\n      // HTTP 4xx, the server won't send anything, it's doesn't make sense to retry\n      return false\n    } else if (typeof navigator !== 'undefined' && navigator.onLine === false) {\n      // The navigator is offline, let's wait for it to come back online.\n      if (!requests.isPaused) {\n        requests.pause()\n        window.addEventListener('online', () => {\n          requests.resume()\n        }, { once: true })\n      }\n    } else {\n      // Other error code means the request can be retried later.\n      const next = this.#retryDelayIterator?.next()\n      if (next == null || next.done) {\n        return false\n      }\n      await new Promise(resolve => setTimeout(resolve, next.value))\n    }\n    return true\n  }\n\n  async getUploadId (file, signal) {\n    let cachedResult\n    // As the cache is updated asynchronously, there could be a race condition\n    // where we just miss a new result so we loop here until we get nothing back,\n    // at which point it's out turn to create a new cache entry.\n    while ((cachedResult = this.#cache.get(file.data)) != null) {\n      try {\n        return await cachedResult\n      } catch {\n        // In case of failure, we want to ignore the cached error.\n        // At this point, either there's a new cached value, or we'll exit the loop a create a new one.\n      }\n    }\n\n    const promise = this.#createMultipartUpload(this.#getFile(file), signal)\n\n    const abortPromise = () => {\n      promise.abort(signal.reason)\n      this.#cache.delete(file.data)\n    }\n    signal.addEventListener('abort', abortPromise, { once: true })\n    this.#cache.set(file.data, promise)\n    promise.then(async (result) => {\n      signal.removeEventListener('abort', abortPromise)\n      this.#setS3MultipartState(file, result)\n      this.#cache.set(file.data, result)\n    }, () => {\n      signal.removeEventListener('abort', abortPromise)\n      this.#cache.delete(file.data)\n    })\n\n    return promise\n  }\n\n  async abortFileUpload (file) {\n    const result = this.#cache.get(file.data)\n    if (result == null) {\n      // If the createMultipartUpload request never was made, we don't\n      // need to send the abortMultipartUpload request.\n      return\n    }\n    // Remove the cache entry right away for follow-up requests do not try to\n    // use the soon-to-be aborted chached values.\n    this.#cache.delete(file.data)\n    this.#setS3MultipartState(file, Object.create(null))\n    let awaitedResult\n    try {\n      awaitedResult = await result\n    } catch {\n      // If the cached result rejects, there's nothing to abort.\n      return\n    }\n    await this.#abortMultipartUpload(this.#getFile(file), awaitedResult)\n  }\n\n  async #nonMultipartUpload (file, chunk, signal) {\n    const {\n      method = 'POST',\n      url,\n      fields,\n      headers,\n    } = await this.#getUploadParameters(this.#getFile(file), { signal }).abortOn(signal)\n\n    let body\n    const data = chunk.getData()\n    if (method.toUpperCase() === 'POST') {\n      const formData = new FormData()\n      Object.entries(fields).forEach(([key, value]) => formData.set(key, value))\n      formData.set('file', data)\n      body = formData\n    } else {\n      body = data\n    }\n\n    const { onProgress, onComplete } = chunk\n\n    return this.#uploadPartBytes({\n      signature: { url, headers, method },\n      body,\n      size: data.size,\n      onProgress,\n      onComplete,\n      signal,\n    }).abortOn(signal)\n  }\n\n  /**\n   * @param {import(\"@uppy/core\").UppyFile} file\n   * @param {import(\"../types/chunk\").Chunk[]} chunks\n   * @param {AbortSignal} signal\n   * @returns {Promise<void>}\n   */\n  async uploadFile (file, chunks, signal) {\n    throwIfAborted(signal)\n    if (chunks.length === 1 && !chunks[0].shouldUseMultipart) {\n      return this.#nonMultipartUpload(file, chunks[0], signal)\n    }\n    const { uploadId, key } = await this.getUploadId(file, signal)\n    throwIfAborted(signal)\n    try {\n      const parts = await Promise.all(chunks.map((chunk, i) => this.uploadChunk(file, i + 1, chunk, signal)))\n      throwIfAborted(signal)\n      return await this.#sendCompletionRequest(\n        this.#getFile(file),\n        { key, uploadId, parts, signal },\n      ).abortOn(signal)\n    } catch (err) {\n      if (err?.cause !== pausingUploadReason && err?.name !== 'AbortError') {\n        // We purposefully don't wait for the promise and ignore its status,\n        // because we want the error `err` to bubble up ASAP to report it to the\n        // user. A failure to abort is not that big of a deal anyway.\n        this.abortFileUpload(file)\n      }\n      throw err\n    }\n  }\n\n  restoreUploadFile (file, uploadIdAndKey) {\n    this.#cache.set(file.data, uploadIdAndKey)\n  }\n\n  async resumeUploadFile (file, chunks, signal) {\n    throwIfAborted(signal)\n    if (chunks.length === 1 && !chunks[0].shouldUseMultipart) {\n      return this.#nonMultipartUpload(file, chunks[0], signal)\n    }\n    const { uploadId, key } = await this.getUploadId(file, signal)\n    throwIfAborted(signal)\n    const alreadyUploadedParts = await this.#listParts(\n      this.#getFile(file),\n      { uploadId, key, signal },\n    ).abortOn(signal)\n    throwIfAborted(signal)\n    const parts = await Promise.all(\n      chunks\n        .map((chunk, i) => {\n          const partNumber = i + 1\n          const alreadyUploadedInfo = alreadyUploadedParts.find(({ PartNumber }) => PartNumber === partNumber)\n          if (alreadyUploadedInfo == null) {\n            return this.uploadChunk(file, partNumber, chunk, signal)\n          }\n          // Already uploaded chunks are set to null. If we are restoring the upload, we need to mark it as already uploaded.\n          chunk?.setAsUploaded?.()\n          return { PartNumber: partNumber, ETag: alreadyUploadedInfo.ETag }\n        }),\n    )\n    throwIfAborted(signal)\n    return this.#sendCompletionRequest(\n      this.#getFile(file),\n      { key, uploadId, parts, signal },\n    ).abortOn(signal)\n  }\n\n  /**\n   *\n   * @param {import(\"@uppy/core\").UppyFile} file\n   * @param {number} partNumber\n   * @param {import(\"../types/chunk\").Chunk} chunk\n   * @param {AbortSignal} signal\n   * @returns {Promise<object>}\n   */\n  async uploadChunk (file, partNumber, chunk, signal) {\n    throwIfAborted(signal)\n    const { uploadId, key } = await this.getUploadId(file, signal)\n    throwIfAborted(signal)\n    for (;;) {\n      const chunkData = chunk.getData()\n      const { onProgress, onComplete } = chunk\n\n      const signature = await this.#fetchSignature(this.#getFile(file), {\n        uploadId, key, partNumber, body: chunkData, signal,\n      }).abortOn(signal)\n\n      throwIfAborted(signal)\n      try {\n        return {\n          PartNumber: partNumber,\n          ...await this.#uploadPartBytes({\n            signature, body: chunkData, size: chunkData.size, onProgress, onComplete, signal,\n          }).abortOn(signal),\n        }\n      } catch (err) {\n        if (!await this.#shouldRetry(err)) throw err\n      }\n    }\n  }\n}\n\nexport default class AwsS3Multipart extends UploaderPlugin {\n  static VERSION = packageJson.version\n\n  #companionCommunicationQueue\n\n  #client\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = this.opts.id || 'AwsS3Multipart'\n    this.title = 'AWS S3 Multipart'\n    this.#client = new RequestClient(uppy, opts)\n\n    const defaultOptions = {\n      // TODO: null here means “include all”, [] means include none.\n      // This is inconsistent with @uppy/aws-s3 and @uppy/transloadit\n      allowedMetaFields: null,\n      limit: 6,\n      shouldUseMultipart: (file) => file.size !== 0, // TODO: Switch default to:\n      // eslint-disable-next-line no-bitwise\n      // shouldUseMultipart: (file) => file.size >> 10 >> 10 > 100,\n      retryDelays: [0, 1000, 3000, 5000],\n      createMultipartUpload: this.createMultipartUpload.bind(this),\n      listParts: this.listParts.bind(this),\n      abortMultipartUpload: this.abortMultipartUpload.bind(this),\n      completeMultipartUpload: this.completeMultipartUpload.bind(this),\n      getTemporarySecurityCredentials: false,\n      signPart: opts?.getTemporarySecurityCredentials ? this.createSignedURL.bind(this) : this.signPart.bind(this),\n      uploadPartBytes: AwsS3Multipart.uploadPartBytes,\n      getUploadParameters: opts?.getTemporarySecurityCredentials\n        ? this.createSignedURL.bind(this)\n        : this.getUploadParameters.bind(this),\n      companionHeaders: {},\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n    if (opts?.prepareUploadParts != null && opts.signPart == null) {\n      this.opts.signPart = async (file, { uploadId, key, partNumber, body, signal }) => {\n        const { presignedUrls, headers } = await opts\n          .prepareUploadParts(file, { uploadId, key, parts: [{ number: partNumber, chunk: body }], signal })\n        return { url: presignedUrls?.[partNumber], headers: headers?.[partNumber] }\n      }\n    }\n\n    /**\n     * Simultaneous upload limiting is shared across all uploads with this plugin.\n     *\n     * @type {RateLimitedQueue}\n     */\n    this.requests = this.opts.rateLimitedQueue ?? new RateLimitedQueue(this.opts.limit)\n    this.#companionCommunicationQueue = new HTTPCommunicationQueue(\n      this.requests,\n      this.opts,\n      this.#setS3MultipartState,\n      this.#getFile,\n    )\n\n    this.uploaders = Object.create(null)\n    this.uploaderEvents = Object.create(null)\n    this.uploaderSockets = Object.create(null)\n\n    this.setQueueRequestSocketToken(this.requests.wrapPromiseFunction(this.#requestSocketToken, { priority: -1 }))\n  }\n\n  [Symbol.for('uppy test: getClient')] () { return this.#client }\n\n  setOptions (newOptions) {\n    this.#companionCommunicationQueue.setOptions(newOptions)\n    return super.setOptions(newOptions)\n  }\n\n  /**\n   * Clean up all references for a file's upload: the MultipartUploader instance,\n   * any events related to the file, and the Companion WebSocket connection.\n   *\n   * Set `opts.abort` to tell S3 that the multipart upload is cancelled and must be removed.\n   * This should be done when the user cancels the upload, not when the upload is completed or errored.\n   */\n  resetUploaderReferences (fileID, opts = {}) {\n    if (this.uploaders[fileID]) {\n      this.uploaders[fileID].abort({ really: opts.abort || false })\n      this.uploaders[fileID] = null\n    }\n    if (this.uploaderEvents[fileID]) {\n      this.uploaderEvents[fileID].remove()\n      this.uploaderEvents[fileID] = null\n    }\n    if (this.uploaderSockets[fileID]) {\n      this.uploaderSockets[fileID].close()\n      this.uploaderSockets[fileID] = null\n    }\n  }\n\n  // TODO: make this a private method in the next major\n  assertHost (method) {\n    if (!this.opts.companionUrl) {\n      throw new Error(`Expected a \\`companionUrl\\` option containing a Companion address, or if you are not using Companion, a custom \\`${method}\\` implementation.`)\n    }\n  }\n\n  createMultipartUpload (file, signal) {\n    this.assertHost('createMultipartUpload')\n    throwIfAborted(signal)\n\n    const metadata = getAllowedMetadata({ meta: file.meta, allowedMetaFields: this.opts.allowedMetaFields })\n\n    return this.#client.post('s3/multipart', {\n      filename: file.name,\n      type: file.type,\n      metadata,\n    }, { signal }).then(assertServerError)\n  }\n\n  listParts (file, { key, uploadId }, signal) {\n    this.assertHost('listParts')\n    throwIfAborted(signal)\n\n    const filename = encodeURIComponent(key)\n    return this.#client.get(`s3/multipart/${uploadId}?key=${filename}`, { signal })\n      .then(assertServerError)\n  }\n\n  completeMultipartUpload (file, { key, uploadId, parts }, signal) {\n    this.assertHost('completeMultipartUpload')\n    throwIfAborted(signal)\n\n    const filename = encodeURIComponent(key)\n    const uploadIdEnc = encodeURIComponent(uploadId)\n    return this.#client.post(`s3/multipart/${uploadIdEnc}/complete?key=${filename}`, { parts }, { signal })\n      .then(assertServerError)\n  }\n\n  /**\n   * @type {import(\"../types\").AwsS3STSResponse | Promise<import(\"../types\").AwsS3STSResponse>}\n   */\n  #cachedTemporaryCredentials\n\n  async #getTemporarySecurityCredentials (options) {\n    throwIfAborted(options?.signal)\n\n    if (this.#cachedTemporaryCredentials == null) {\n      // We do not await it just yet, so concurrent calls do not try to override it:\n      if (this.opts.getTemporarySecurityCredentials === true) {\n        this.assertHost('getTemporarySecurityCredentials')\n        this.#cachedTemporaryCredentials = this.#client.get('s3/sts', null, options).then(assertServerError)\n      } else {\n        this.#cachedTemporaryCredentials = this.opts.getTemporarySecurityCredentials(options)\n      }\n      this.#cachedTemporaryCredentials = await this.#cachedTemporaryCredentials\n      setTimeout(() => {\n        // At half the time left before expiration, we clear the cache. That's\n        // an arbitrary tradeoff to limit the number of requests made to the\n        // remote while limiting the risk of using an expired token in case the\n        // clocks are not exactly synced.\n        // The HTTP cache should be configured to ensure a client doesn't request\n        // more tokens than it needs, but this timeout provides a second layer of\n        // security in case the HTTP cache is disabled or misconfigured.\n        this.#cachedTemporaryCredentials = null\n      }, (getExpiry(this.#cachedTemporaryCredentials.credentials) || 0) * 500)\n    }\n\n    return this.#cachedTemporaryCredentials\n  }\n\n  async createSignedURL (file, options) {\n    const data = await this.#getTemporarySecurityCredentials(options)\n    const expires = getExpiry(data.credentials) || 604_800 // 604 800 is the max value accepted by AWS.\n\n    const { uploadId, key, partNumber, signal } = options\n\n    // Return an object in the correct shape.\n    return {\n      method: 'PUT',\n      expires,\n      fields: {},\n      url: `${await createSignedURL({\n        accountKey: data.credentials.AccessKeyId,\n        accountSecret: data.credentials.SecretAccessKey,\n        sessionToken: data.credentials.SessionToken,\n        expires,\n        bucketName: data.bucket,\n        Region: data.region,\n        Key: key ?? `${crypto.randomUUID()}-${file.name}`,\n        uploadId,\n        partNumber,\n        signal,\n      })}`,\n      // Provide content type header required by S3\n      headers: {\n        'Content-Type': file.type,\n      },\n    }\n  }\n\n  signPart (file, { uploadId, key, partNumber, signal }) {\n    this.assertHost('signPart')\n    throwIfAborted(signal)\n\n    if (uploadId == null || key == null || partNumber == null) {\n      throw new Error('Cannot sign without a key, an uploadId, and a partNumber')\n    }\n\n    const filename = encodeURIComponent(key)\n    return this.#client.get(`s3/multipart/${uploadId}/${partNumber}?key=${filename}`, { signal })\n      .then(assertServerError)\n  }\n\n  abortMultipartUpload (file, { key, uploadId }, signal) {\n    this.assertHost('abortMultipartUpload')\n\n    const filename = encodeURIComponent(key)\n    const uploadIdEnc = encodeURIComponent(uploadId)\n    return this.#client.delete(`s3/multipart/${uploadIdEnc}?key=${filename}`, undefined, { signal })\n      .then(assertServerError)\n  }\n\n  getUploadParameters (file, options) {\n    const { meta } = file\n    const { type, name: filename } = meta\n    const metadata = getAllowedMetadata({ meta, allowedMetaFields: this.opts.allowedMetaFields, querify: true })\n\n    const query = new URLSearchParams({ filename, type, ...metadata })\n\n    return this.#client.get(`s3/params?${query}`, options)\n  }\n\n  static async uploadPartBytes ({ signature: { url, expires, headers, method = 'PUT' }, body, size = body.size, onProgress, onComplete, signal }) {\n    throwIfAborted(signal)\n\n    if (url == null) {\n      throw new Error('Cannot upload to an undefined URL')\n    }\n\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest()\n      xhr.open(method, url, true)\n      if (headers) {\n        Object.keys(headers).forEach((key) => {\n          xhr.setRequestHeader(key, headers[key])\n        })\n      }\n      xhr.responseType = 'text'\n      if (typeof expires === 'number') {\n        xhr.timeout = expires * 1000\n      }\n\n      function onabort () {\n        xhr.abort()\n      }\n      function cleanup () {\n        signal.removeEventListener('abort', onabort)\n      }\n      signal.addEventListener('abort', onabort)\n\n      xhr.upload.addEventListener('progress', (ev) => {\n        onProgress(ev)\n      })\n\n      xhr.addEventListener('abort', () => {\n        cleanup()\n\n        reject(createAbortError())\n      })\n\n      xhr.addEventListener('timeout', () => {\n        cleanup()\n\n        const error = new Error('Request has expired')\n        error.source = { status: 403 }\n        reject(error)\n      })\n      xhr.addEventListener('load', (ev) => {\n        cleanup()\n\n        if (ev.target.status === 403 && ev.target.responseText.includes('<Message>Request has expired</Message>')) {\n          const error = new Error('Request has expired')\n          error.source = ev.target\n          reject(error)\n          return\n        } if (ev.target.status < 200 || ev.target.status >= 300) {\n          const error = new Error('Non 2xx')\n          error.source = ev.target\n          reject(error)\n          return\n        }\n\n        // todo make a proper onProgress API (breaking change)\n        onProgress?.({ loaded: size, lengthComputable: true })\n\n        // NOTE This must be allowed by CORS.\n        const etag = ev.target.getResponseHeader('ETag')\n        const location = ev.target.getResponseHeader('Location')\n\n        if (method.toUpperCase() === 'POST' && location === null) {\n          // Not being able to read the Location header is not a fatal error.\n          // eslint-disable-next-line no-console\n          console.warn('AwsS3/Multipart: Could not read the Location header. This likely means CORS is not configured correctly on the S3 Bucket. See https://uppy.io/docs/aws-s3-multipart#S3-Bucket-Configuration for instructions.')\n        }\n        if (etag === null) {\n          reject(new Error('AwsS3/Multipart: Could not read the ETag header. This likely means CORS is not configured correctly on the S3 Bucket. See https://uppy.io/docs/aws-s3-multipart#S3-Bucket-Configuration for instructions.'))\n          return\n        }\n\n        onComplete?.(etag)\n        resolve({\n          ETag: etag,\n          ...(location ? { location } : undefined),\n        })\n      })\n\n      xhr.addEventListener('error', (ev) => {\n        cleanup()\n\n        const error = new Error('Unknown error')\n        error.source = ev.target\n        reject(error)\n      })\n\n      xhr.send(body)\n    })\n  }\n\n  #setS3MultipartState = (file, { key, uploadId }) => {\n    const cFile = this.uppy.getFile(file.id)\n    if (cFile == null) {\n      // file was removed from store\n      return\n    }\n\n    this.uppy.setFileState(file.id, {\n      s3Multipart: {\n        ...cFile.s3Multipart,\n        key,\n        uploadId,\n      },\n    })\n  }\n\n  #getFile = (file) => {\n    return this.uppy.getFile(file.id) || file\n  }\n\n  #uploadFile (file) {\n    return new Promise((resolve, reject) => {\n      const onProgress = (bytesUploaded, bytesTotal) => {\n        this.uppy.emit('upload-progress', file, {\n          uploader: this,\n          bytesUploaded,\n          bytesTotal,\n        })\n      }\n\n      const onError = (err) => {\n        this.uppy.log(err)\n        this.uppy.emit('upload-error', file, err)\n\n        this.resetUploaderReferences(file.id)\n        reject(err)\n      }\n\n      const onSuccess = (result) => {\n        const uploadResp = {\n          body: {\n            ...result,\n          },\n          uploadURL: result.location,\n        }\n\n        this.resetUploaderReferences(file.id)\n\n        this.uppy.emit('upload-success', this.#getFile(file), uploadResp)\n\n        if (result.location) {\n          this.uppy.log(`Download ${file.name} from ${result.location}`)\n        }\n\n        resolve()\n      }\n\n      const onPartComplete = (part) => {\n        this.uppy.emit('s3-multipart:part-uploaded', this.#getFile(file), part)\n      }\n\n      const upload = new MultipartUploader(file.data, {\n        // .bind to pass the file object to each handler.\n        companionComm: this.#companionCommunicationQueue,\n\n        log: (...args) => this.uppy.log(...args),\n        getChunkSize: this.opts.getChunkSize ? this.opts.getChunkSize.bind(this) : null,\n\n        onProgress,\n        onError,\n        onSuccess,\n        onPartComplete,\n\n        file,\n        shouldUseMultipart: this.opts.shouldUseMultipart,\n\n        ...file.s3Multipart,\n      })\n\n      this.uploaders[file.id] = upload\n      this.uploaderEvents[file.id] = new EventManager(this.uppy)\n\n      this.onFileRemove(file.id, (removed) => {\n        upload.abort()\n        this.resetUploaderReferences(file.id, { abort: true })\n        resolve(`upload ${removed.id} was removed`)\n      })\n\n      this.onCancelAll(file.id, ({ reason } = {}) => {\n        if (reason === 'user') {\n          upload.abort()\n          this.resetUploaderReferences(file.id, { abort: true })\n        }\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      this.onFilePause(file.id, (isPaused) => {\n        if (isPaused) {\n          upload.pause()\n        } else {\n          upload.start()\n        }\n      })\n\n      this.onPauseAll(file.id, () => {\n        upload.pause()\n      })\n\n      this.onResumeAll(file.id, () => {\n        upload.start()\n      })\n\n      upload.start()\n    })\n  }\n\n  #requestSocketToken = async (file, options) => {\n    const Client = file.remote.providerOptions.provider ? Provider : RequestClient\n    const client = new Client(this.uppy, file.remote.providerOptions)\n    const opts = { ...this.opts }\n\n    if (file.tus) {\n      // Install file-specific upload overrides.\n      Object.assign(opts, file.tus)\n    }\n\n    if (file.remote.url == null) {\n      throw new Error('Cannot connect to an undefined URL')\n    }\n\n    const res = await client.post(file.remote.url, {\n      ...file.remote.body,\n      protocol: 's3-multipart',\n      size: file.data.size,\n      metadata: file.meta,\n    }, options)\n    return res.token\n  }\n\n  async connectToServerSocket (file) {\n    return new Promise((resolve, reject) => {\n      let queuedRequest\n\n      const token = file.serverToken\n      const host = getSocketHost(file.remote.companionUrl)\n      const socket = new Socket({ target: `${host}/api/${token}`, autoOpen: false })\n      this.uploaderSockets[file.id] = socket\n      this.uploaderEvents[file.id] = new EventManager(this.uppy)\n\n      this.onFileRemove(file.id, () => {\n        socket.send('cancel', {})\n        queuedRequest.abort()\n        this.resetUploaderReferences(file.id, { abort: true })\n        resolve(`upload ${file.id} was removed`)\n      })\n\n      this.onFilePause(file.id, (isPaused) => {\n        if (isPaused) {\n          // Remove this file from the queue so another file can start in its place.\n          socket.send('pause', {})\n          queuedRequest.abort()\n        } else {\n          // Resuming an upload should be queued, else you could pause and then\n          // resume a queued upload to make it skip the queue.\n          queuedRequest.abort()\n          queuedRequest = this.requests.run(() => {\n            socket.open()\n            socket.send('resume', {})\n            return () => {}\n          })\n        }\n      })\n\n      this.onPauseAll(file.id, () => {\n        // First send the message, then call .abort,\n        // just to make sure socket is not closed, which .abort used to do\n        socket.send('pause', {})\n        queuedRequest.abort()\n      })\n\n      this.onCancelAll(file.id, ({ reason } = {}) => {\n        if (reason === 'user') {\n          socket.send('cancel', {})\n          queuedRequest.abort()\n          this.resetUploaderReferences(file.id)\n        }\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      this.onResumeAll(file.id, () => {\n        queuedRequest.abort()\n        if (file.error) {\n          socket.send('pause', {})\n        }\n        queuedRequest = this.requests.run(() => {\n          socket.open()\n          socket.send('resume', {})\n\n          return () => {}\n        })\n      })\n\n      this.onRetry(file.id, () => {\n        // Only do the retry if the upload is actually in progress;\n        // else we could try to send these messages when the upload is still queued.\n        // We may need a better check for this since the socket may also be closed\n        // for other reasons, like network failures.\n        if (socket.isOpen) {\n          socket.send('pause', {})\n          socket.send('resume', {})\n        }\n      })\n\n      this.onRetryAll(file.id, () => {\n        if (socket.isOpen) {\n          socket.send('pause', {})\n          socket.send('resume', {})\n        }\n      })\n\n      socket.on('progress', (progressData) => emitSocketProgress(this, progressData, file))\n\n      socket.on('error', (errData) => {\n        this.uppy.emit('upload-error', file, new Error(errData.error))\n        this.resetUploaderReferences(file.id)\n        socket.close()\n        queuedRequest.done()\n        reject(new Error(errData.error))\n      })\n\n      socket.on('success', (data) => {\n        const uploadResp = {\n          uploadURL: data.url,\n        }\n\n        this.uppy.emit('upload-success', file, uploadResp)\n        this.resetUploaderReferences(file.id)\n        socket.close()\n        queuedRequest.done()\n        resolve()\n      })\n\n      queuedRequest = this.requests.run(() => {\n        if (file.isPaused) {\n          socket.send('pause', {})\n        } else {\n          socket.open()\n        }\n\n        return () => {}\n      })\n    })\n  }\n\n  #upload = async (fileIDs) => {\n    if (fileIDs.length === 0) return undefined\n\n    const files = this.uppy.getFilesByIds(fileIDs)\n\n    const filesFiltered = filterNonFailedFiles(files)\n    const filesToEmit = filterFilesToEmitUploadStarted(filesFiltered)\n    this.uppy.emit('upload-start', filesToEmit)\n\n    const promises = filesFiltered.map((file) => {\n      if (file.isRemote) {\n        this.#setResumableUploadsCapability(false)\n        const controller = new AbortController()\n\n        const removedHandler = (removedFile) => {\n          if (removedFile.id === file.id) controller.abort()\n        }\n        this.uppy.on('file-removed', removedHandler)\n\n        this.resetUploaderReferences(file.id)\n        const uploadPromise = this.uploadRemoteFile(file, { signal: controller.signal })\n\n        this.requests.wrapSyncFunction(() => {\n          this.uppy.off('file-removed', removedHandler)\n        }, { priority: -1 })()\n\n        return uploadPromise\n      }\n      return this.#uploadFile(file)\n    })\n\n    const upload = await Promise.all(promises)\n    // After the upload is done, another upload may happen with only local files.\n    // We reset the capability so that the next upload can use resumable uploads.\n    this.#setResumableUploadsCapability(true)\n    return upload\n  }\n\n  #setCompanionHeaders = () => {\n    this.#client.setCompanionHeaders(this.opts.companionHeaders)\n  }\n\n  onFileRemove (fileID, cb) {\n    this.uploaderEvents[fileID].on('file-removed', (file) => {\n      if (fileID === file.id) cb(file.id)\n    })\n  }\n\n  onFilePause (fileID, cb) {\n    this.uploaderEvents[fileID].on('upload-pause', (targetFileID, isPaused) => {\n      if (fileID === targetFileID) {\n        cb(isPaused)\n      }\n    })\n  }\n\n  onRetry (fileID, cb) {\n    this.uploaderEvents[fileID].on('upload-retry', (targetFileID) => {\n      if (fileID === targetFileID) {\n        cb()\n      }\n    })\n  }\n\n  onRetryAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('retry-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  onPauseAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('pause-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  onCancelAll (fileID, eventHandler) {\n    this.uploaderEvents[fileID].on('cancel-all', (...args) => {\n      if (!this.uppy.getFile(fileID)) return\n      eventHandler(...args)\n    })\n  }\n\n  onResumeAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('resume-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  #setResumableUploadsCapability = (boolean) => {\n    const { capabilities } = this.uppy.getState()\n    this.uppy.setState({\n      capabilities: {\n        ...capabilities,\n        resumableUploads: boolean,\n      },\n    })\n  }\n\n  #resetResumableCapability = () => {\n    this.#setResumableUploadsCapability(true)\n  }\n\n  install () {\n    this.#setResumableUploadsCapability(true)\n    this.uppy.addPreProcessor(this.#setCompanionHeaders)\n    this.uppy.addUploader(this.#upload)\n    this.uppy.on('cancel-all', this.#resetResumableCapability)\n  }\n\n  uninstall () {\n    this.uppy.removePreProcessor(this.#setCompanionHeaders)\n    this.uppy.removeUploader(this.#upload)\n    this.uppy.off('cancel-all', this.#resetResumableCapability)\n  }\n}\n"],"mappings":"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"}